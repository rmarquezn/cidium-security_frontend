{"ast":null,"code":"var _jsxFileName = \"/Users/rmarquezn/Desktop/Tec/Proyecto/cidium-security/src/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport LoginPage from \".components/LoginPage\";\nimport HomePage from \".components/HomePage\";\nimport CommentsSection from \".components/CommentsSection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  function handleLogin(username, password) {\n    // Here you can implement your logic for verifying the user's credentials\n    // If the credentials are valid, set loggedIn to true\n    setLoggedIn(true);\n  }\n  function handlePostClick(postId) {\n    // Set the selected post ID when the user clicks on a post\n    setSelectedPostId(postId);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(HomePage, {\n        onPostClick: handlePostClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), selectedPostId && /*#__PURE__*/_jsxDEV(CommentsSection, {\n        postId: selectedPostId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2MfYncTn8KzDt0KEstwIjdFDgdY=\");\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactDOM","LoginPage","HomePage","CommentsSection","jsxDEV","_jsxDEV","App","_s","loggedIn","setLoggedIn","selectedPostId","setSelectedPostId","handleLogin","username","password","handlePostClick","postId","children","onPostClick","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","_c","render","document","getElementById","$RefreshReg$"],"sources":["/Users/rmarquezn/Desktop/Tec/Proyecto/cidium-security/src/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport LoginPage from \".components/LoginPage\";\nimport HomePage from \".components/HomePage\";\nimport CommentsSection from \".components/CommentsSection\";\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  function handleLogin(username, password) {\n    // Here you can implement your logic for verifying the user's credentials\n    // If the credentials are valid, set loggedIn to true\n    setLoggedIn(true);\n  }\n\n  function handlePostClick(postId) {\n    // Set the selected post ID when the user clicks on a post\n    setSelectedPostId(postId);\n  }\n\n  return (\n    <div>\n      {loggedIn ? (\n        <div>\n          <HomePage onPostClick={handlePostClick} />\n          {selectedPostId && <CommentsSection postId={selectedPostId} />}\n        </div>\n      ) : (\n        <LoginPage onLogin={handleLogin} />\n      )}\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,eAAe,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE1D,SAASa,WAAWA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACvC;IACA;IACAL,WAAW,CAAC,IAAI,CAAC;EACnB;EAEA,SAASM,eAAeA,CAACC,MAAM,EAAE;IAC/B;IACAL,iBAAiB,CAACK,MAAM,CAAC;EAC3B;EAEA,oBACEX,OAAA;IAAAY,QAAA,EACGT,QAAQ,gBACPH,OAAA;MAAAY,QAAA,gBACEZ,OAAA,CAACH,QAAQ;QAACgB,WAAW,EAAEH;MAAgB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,EACzCZ,cAAc,iBAAIL,OAAA,CAACF,eAAe;QAACa,MAAM,EAAEN;MAAe;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC1D,gBAENjB,OAAA,CAACJ,SAAS;MAACsB,OAAO,EAAEX;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACjC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAACf,EAAA,CA3BQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AA6BZN,QAAQ,CAACyB,MAAM,eAACpB,OAAA,CAACC,GAAG;EAAAa,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,QAAG,EAAEI,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}